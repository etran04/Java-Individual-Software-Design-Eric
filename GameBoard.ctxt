#BlueJ class context
comment0.params=bothView
comment0.target=GameBoard(boolean)
comment0.text=\r\n\ Default\ constructor\ for\ the\ GameBoard\ class.\r\n\ @param\ bothView\ whether\ or\ not\ two\ views\r\n
comment1.params=
comment1.target=GameBoard.MyTable\ getGrid()
comment1.text=\r\n\ Gets\ the\ grid.\r\n\ @return\ the\ abstract\ table\ model\ \r\n
comment10.params=code
comment10.target=void\ setLastDir(int)
comment10.text=\r\n\ Stores\ the\ last\ moved\ direction.\r\n\ @param\ code\ the\ direction\ to\ be\ saved\r\n
comment11.params=
comment11.target=int\ getLastDir()
comment11.text=\r\n\ Gets\ the\ last\ moved\ direction.\r\n\ @return\ last\ move\ direction\r\n
comment12.params=
comment12.target=java.util.ArrayList\ getMoves()
comment12.text=\r\n\ Gets\ the\ move\ sequence\ used\ currently.\r\n\ @return\ list\ of\ moves\r\n
comment13.params=
comment13.target=HallOfFame\ getHallOfFame()
comment13.text=\r\n\ Gets\ the\ stored\ Hall\ Of\ Fame\ of\ this\ game.\ \r\n\ @return\ the\ board's\ hall\ of\ fame\r\n
comment14.params=
comment14.target=boolean\ getAlreadySaved()
comment14.text=\r\n\ Gets\ the\ flag\ for\ whether\ or\ not\ the\ \r\n\ last\ game\ was\ saved.\ \r\n\ @return\ whether\ or\ not\ already\ saved\ to\ hall\ of\ fame\r\n
comment15.params=
comment15.target=boolean\ getBothViewUp()
comment15.text=\r\n\ Gets\ the\ flag\ for\ whether\ or\ not\ both\ views\ are\ up.\r\n\ @return\ whether\ 2\ views\r\n
comment16.params=
comment16.target=boolean\ getAboutFlag()
comment16.text=\r\n\ Gets\ the\ aboutFlag.\r\n\ @return\ about\ flag\r\n
comment17.params=
comment17.target=boolean\ getHallFlag()
comment17.text=\r\n\ Gets\ the\ Hall\ Of\ Fame\ flag.\r\n\ @return\ hall\ flag\r\n
comment18.params=flag
comment18.target=void\ setAboutFlag(boolean)
comment18.text=\r\n\ Sets\ the\ aboutFlag.\r\n\ @param\ flag\ new\ flag\ to\ set\ to\ \r\n
comment19.params=flag
comment19.target=void\ setHallFlag(boolean)
comment19.text=\r\n\ Sets\ the\ Hall\ Of\ Fame\ flag.\r\n\ @param\ flag\ new\ flag\ to\ set\ to\ \r\n
comment2.params=
comment2.target=BoardRegulator\ getRegulator()
comment2.text=\r\n\ Gets\ the\ board\ regulator.\r\n\ @return\ the\ board\ regulator\r\n
comment20.params=flag
comment20.target=void\ setAboutFlagWithoutNotifying(boolean)
comment20.text=\r\n\ Sets\ the\ aboutFlag\ without\ notifying\ the\ observers.\r\n\ @param\ flag\ new\ flag\ to\ set\ to\ \r\n
comment21.params=flag
comment21.target=void\ setHallFlagWithoutNotifying(boolean)
comment21.text=\r\n\ Sets\ the\ hallFlag\ without\ notifying\ observers.\r\n\ @param\ flag\ new\ flag\ to\ set\ to\ \r\n\ \r\n
comment22.params=moves
comment22.target=void\ addEntryToHallOfFame(java.lang.StringBuilder)
comment22.text=\r\n\ Adds\ a\ new\ entry\ into\ the\ HallOfFame.\r\n\ @param\ moves\ the\ winning\ seqence\ to\ add\ to\ hall\ \r\n
comment23.params=atLeast2\ withinBounds\ splited
comment23.target=boolean[]\ checkRepeatsNumkReds(boolean,\ boolean,\ java.lang.String[])
comment23.text=\r\n\ Checks\ for\ repeats\ and\ correct\ number\ of\ robots.\r\n\ @param\ atLeast2\ whether\ or\ not\ at\ least\ 2\ chars\r\n\ @param\ withinBounds\ at\ least\ all\ are\ within\ bounds\r\n\ @param\ splited\ array\ with\ all\ the\ coordinates\ \r\n\ @return\ flags\ some\ valid\ flags\ (redCount\ and\ dupes)\r\n
comment24.params=input
comment24.target=boolean\ checkBound(java.lang.String)
comment24.text=\r\n\ Helper\ method\ to\ help\ parse\ and\ check\ if\ coordiante\ is\ within\r\n\ the\ bounds.\r\n\ @param\ input\ the\ coordinate\ to\ be\ checked\r\n\ @return\ whether\ or\ not\ it\ is\ within\ boun\ \r\n
comment25.params=splited\ maxChar
comment25.target=boolean[]\ checkFlags(java.lang.String[],\ int)
comment25.text=\r\n\ Helper\ method\ for\ checking\ if\ a\ board\ is\ valid.\r\n\ @param\ splited\ the\ board\ to\ be\ checked\ splited\ into\ strings\r\n\ @param\ maxChar\ the\ maximum\ number\ of\ chars\ \r\n\ @return\ the\ results\ of\ the\ check\r\n
comment26.params=board
comment26.target=boolean\ checkValid(java.lang.String)
comment26.text=\r\n\ Check\ to\ see\ if\ input\ is\ a\ valid\ board.\r\n\ @param\ board\ string\ input\ that\ needs\ to\ be\ checked\r\n\ @return\ whether\ or\ not\ input\ is\ valid\ \r\n
comment27.params=
comment27.target=void\ clearBoard()
comment27.text=\r\n\ Clears\ the\ board\ of\ all\ robots.\ \r\n
comment28.params=board
comment28.target=void\ newGame(java.lang.String)
comment28.text=\r\n\ Start\ a\ new\ game\ by\ putting\ new\ values\ in\ the\ board.\r\n\ @param\ board\ new\ board\ to\ be\ changed\ to\ \r\n
comment29.params=
comment29.target=void\ clearTrails()
comment29.text=\r\n\ Clears\ the\ previous\ trail\ to\ blanks.\r\n
comment3.params=
comment3.target=int\ getMoveCount()
comment3.text=\r\n\ Gets\ the\ numbers\ of\ moves\ currently\ at.\ \r\n\ @return\ number\ of\ moves\ currently\ at\r\n
comment30.params=movedPiece
comment30.target=void\ checkWinGame(java.lang.Object)
comment30.text=\r\n\ Checks\ at\ the\ end\ of\ each\ move,\ if\ user\ has\ won\ the\ game.\r\n\ @param\ movedPiece\ the\ gamePiece\ to\ be\ analyzed\r\n
comment31.params=row\ col
comment31.target=java.lang.Object\ selectRightPiece(int,\ int)
comment31.text=\r\n\ Determines\ if\ the\ piece\ we're\ moving\ is\ red\ or\ green.\r\n\ @param\ row\ the\ x\ coord\r\n\ @param\ col\ the\ y\ coord\r\n\ @return\ the\ correct\ color\ piece\ at\ that\ location\ \r\n
comment32.params=row\ col\ movedPiece
comment32.target=java.lang.String\ moveDirectionDown(int,\ int,\ java.lang.Object)
comment32.text=\r\n\ Helps\ move\ the\ gamePiece\ to\ a\ location.\r\n\ @param\ row\ the\ x\ coord\r\n\ @param\ col\ the\ y\ coord\ \r\n\ @param\ movedPiece\ the\ color\ to\ be\ moved\r\n\ @return\ the\ direction\ moved\r\n
comment33.params=row\ col\ movedPiece
comment33.target=java.lang.String\ moveDirectionUp(int,\ int,\ java.lang.Object)
comment33.text=\r\n\ Helps\ move\ the\ gamePiece\ to\ a\ location.\r\n\ @param\ row\ the\ x\ coord\r\n\ @param\ col\ the\ y\ coord\ \r\n\ @param\ movedPiece\ the\ color\ to\ be\ moved\r\n\ @return\ the\ direction\ moved\r\n
comment34.params=row\ col\ movedPiece
comment34.target=java.lang.String\ moveDirectionRight(int,\ int,\ java.lang.Object)
comment34.text=\r\n\ Helps\ move\ the\ gamePiece\ to\ a\ location.\r\n\ @param\ row\ the\ x\ coord\r\n\ @param\ col\ the\ y\ coord\ \r\n\ @param\ movedPiece\ the\ color\ to\ be\ moved\r\n\ @return\ the\ direction\ moved\r\n
comment35.params=row\ col\ movedPiece
comment35.target=java.lang.String\ moveDirectionLeft(int,\ int,\ java.lang.Object)
comment35.text=\r\n\ Helps\ move\ the\ gamePiece\ to\ a\ location.\r\n\ @param\ row\ the\ x\ coord\r\n\ @param\ col\ the\ y\ coord\ \r\n\ @param\ movedPiece\ the\ color\ to\ be\ moved\r\n\ @return\ the\ direction\ moved\r\n
comment36.params=row\ col\ keyCode
comment36.target=void\ movePiece(int,\ int,\ int)
comment36.text=\r\n\ Moves\ a\ gamepiece\ in\ the\ direction\ of\ keycode.\r\n\ @param\ row\ the\ x\ coord\r\n\ @param\ col\ the\ y\ coord\r\n\ @param\ keyCode\ the\ direction\ key\ entered\r\n
comment4.params=
comment4.target=boolean\ getLoseFlag()
comment4.text=\r\n\ Gets\ the\ lose\ flag.\r\n\ @return\ whether\ or\ not\ game\ is\ lost\r\n
comment5.params=
comment5.target=boolean\ getWinFlag()
comment5.text=\r\n\ Gets\ the\ win\ flag.\r\n\ @return\ whether\ or\ not\ game\ is\ won\r\n
comment6.params=
comment6.target=void\ resetWinLose()
comment6.text=\r\n\ Resets\ the\ initial\ game\ variables\ to\ 0,\ or\ false.\ \r\n
comment7.params=
comment7.target=int\ getLastMovedRow()
comment7.text=\r\n\ Gets\ the\ last\ moved\ row.\r\n\ @return\ last\ moved\ row\ \r\n
comment8.params=
comment8.target=int\ getLastMovedCol()
comment8.text=\r\n\ Gets\ the\ last\ moved\ col.\r\n\ @return\ last\ move\ col\r\n
comment9.params=
comment9.target=void\ resetMovedRowCol()
comment9.text=\r\n\ Resets\ the\ last\ moved\ row\ and\ col\ to\ -1.\ \r\n
numComments=37
